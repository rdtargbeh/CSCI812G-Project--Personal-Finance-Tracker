package csci812_project.backend.entity;

import csci812_project.backend.enums.InvestmentType;
import jakarta.persistence.*;
import jakarta.validation.constraints.DecimalMin;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import lombok.*;

import java.math.BigDecimal;
import java.time.LocalDateTime;

@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor


@Entity
@Table(name = "investments")
@Builder
public class Investment {

    /**
     * Unique investment ID (Primary Key).
     * Auto-generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "investment_id")
    private Long id;

    /**
     * Foreign Key linking the investment to a user.
     * Ensures that each investment is assigned to a specific user.
     */
    @ManyToOne
    @JoinColumn(name = "user_id", nullable = false, foreignKey = @ForeignKey(name = "fk_investment_user"))
    private User user;

    /**
     * Type of investment (STOCKS, CRYPTO, MUTUAL_FUNDS, REAL_ESTATE).
     * Required field.
     */
    @Column(name = "investment_type", nullable = false)
    @Enumerated(EnumType.STRING)
    private InvestmentType investmentType;

    /**
     * Name of the investment asset (e.g., "Apple Stocks", "Bitcoin").
     * Required field.
     */
    @Column(name = "asset_name", nullable = false, length = 100)
    @NotBlank(message = "Asset name is required")
    private String assetName;

    /**
     * Initial amount invested.
     * Cannot be negative.
     */
    @Column(name = "amount_invested", nullable = false, precision = 15, scale = 2)
    @DecimalMin(value = "0.00", message = "Investment amount cannot be negative")
    private BigDecimal amountInvested;

    /**
     * Current market value of the investment.
     * Cannot be negative.
     */
    @Column(name = "current_value", nullable = false, precision = 15, scale = 2)
    @DecimalMin(value = "0.00", message = "Current value cannot be negative")
    private BigDecimal currentValue = BigDecimal.ZERO;

    /**
     * Date when the investment was purchased.
     */
    @Column(name = "purchase_date", nullable = false)
    @NotNull(message = "Purchase date is required")
    private LocalDateTime purchaseDate;

    /**
     * Last updated timestamp for the investment valuation.
     * Automatically updates on modification.
     */
    @Column(name = "last_updated")
    private LocalDateTime lastUpdated = LocalDateTime.now();

    /**
     * Soft delete flag to prevent accidental deletion.
     * Instead of removing an investment, set this flag to TRUE.
     */
    @Column(name = "is_deleted", nullable = false)
    private boolean isDeleted = false;

    /**
     * Timestamp for when the investment record was created.
     * Automatically set when a new record is inserted.
     */
    @Column(name = "date_created", updatable = false)
    private LocalDateTime dateCreated = LocalDateTime.now();

    /**
     * Lifecycle hook to update the timestamp before updating.
     */
    @PreUpdate
    protected void onUpdate() {
        this.lastUpdated = LocalDateTime.now();
    }
}


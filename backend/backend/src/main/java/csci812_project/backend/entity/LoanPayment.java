package csci812_project.backend.entity;

import jakarta.persistence.*;
import jakarta.validation.constraints.DecimalMin;
import jakarta.validation.constraints.NotNull;
import lombok.*;

import java.math.BigDecimal;
import java.time.LocalDateTime;

@Entity
@Table(name = "loan_payments")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class LoanPayment {

    /**
     * Unique payment ID (Primary Key).
     * Auto-generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "payment_id")
    private Long id;

    /**
     * Foreign Key linking the payment to a loan.
     * Ensures that each payment belongs to a specific loan.
     */
    @ManyToOne
    @JoinColumn(name = "loan_id", nullable = false, foreignKey = @ForeignKey(name = "fk_loan_payment_loan"))
    private Loan loan;

    /**
     * Foreign Key linking the payment to a user.
     * Ensures that each payment is associated with a specific user.
     */
    @ManyToOne
    @JoinColumn(name = "user_id", nullable = false, foreignKey = @ForeignKey(name = "fk_loan_payment_user"))
    private User user;

    /**
     * Amount paid in this transaction.
     * Cannot be negative.
     */
    @Column(name = "payment_amount", nullable = false, precision = 15, scale = 2)
    @DecimalMin(value = "0.00", message = "Payment amount cannot be negative")
    private BigDecimal paymentAmount;

    /**
     * Date and time of the payment.
     * Defaults to the current timestamp.
     */
    @Column(name = "payment_date", nullable = false)
    private LocalDateTime paymentDate = LocalDateTime.now();

    /**
     * Remaining balance on the loan after this payment.
     * Cannot be negative.
     */
    @Column(name = "remaining_balance", nullable = false, precision = 15, scale = 2)
    @DecimalMin(value = "0.00", message = "Remaining balance cannot be negative")
    private BigDecimal remainingBalance;
}

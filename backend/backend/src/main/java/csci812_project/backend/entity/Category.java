package csci812_project.backend.entity;


import csci812_project.backend.enums.CategoryType;
import jakarta.persistence.*;
import jakarta.validation.constraints.*;
import lombok.*;

import java.time.LocalDateTime;


@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor

@Entity
@Table(name = "categories")
@Builder
public class Category {

    /**
     * Unique category ID (Primary Key).
     * Auto-generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "category_id")
    private Long id;

    /**
     * Name of the category (e.g., "Food", "Salary").
     * Cannot be null or empty.
     */
    @Column(name = "name", nullable = false, length = 50)
    @NotBlank(message = "Category name is required")
    private String name;

    /**
     * Type of the category (INCOME or EXPENSE).
     * Must be one of the predefined ENUM values.
     */
    @Column(name = "type", nullable = false)
    @Enumerated(EnumType.STRING)
    private CategoryType type;

    /**
     * Icon for the category (e.g., "shopping_cart", "salary").
     * Optional field to enhance UI.
     */
    @Column(name = "icon", length = 50)
    private String icon;

    /**
     * Color code for the category (e.g., "#FF5733").
     * Optional field to enhance UI.
     */
    @Column(name = "color_code", length = 10)
    private String colorCode;

    /**
     * Foreign Key linking the category to a user.
     * NULL means it's a system-defined category.
     */
    @ManyToOne
    @JoinColumn(name = "user_id", foreignKey = @ForeignKey(name = "fk_category_user"), nullable = true)
    private User user;

    /**
     * Soft delete flag to prevent accidental deletion.
     * Instead of removing a category, set this flag to TRUE.
     */
    @Column(name = "is_deleted", nullable = false)
    private boolean isDeleted = false;

    /**
     * Timestamp for when the category was created.
     * Automatically set when a new record is inserted.
     */
    @Column(name = "date_created", updatable = false)
    private LocalDateTime dateCreated = LocalDateTime.now();
}

package csci812_project.backend.entity;


import csci812_project.backend.enums.CategoryType;
import jakarta.persistence.*;
import jakarta.validation.constraints.*;

import java.time.LocalDateTime;


@Entity
@Table(name = "categories")
public class Category {

    /**
     * Unique category ID (Primary Key).
     * Auto-generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "category_id")
    private Long categoryId;

    /**
     * Name of the category (e.g., "Food", "Salary").
     * Cannot be null or empty.
     */
    @Column(name = "name", nullable = false, length = 50)
    @NotBlank(message = "Category name is required")
    private String name;

    /**
     * Type of the category (INCOME or EXPENSE).
     * Must be one of the predefined ENUM values.
     */
    @Column(name = "type", nullable = false)
    @Enumerated(EnumType.STRING)
    private CategoryType type;

    /**
     * Icon for the category (e.g., "shopping_cart", "salary").
     * Optional field to enhance UI.
     */
    @Column(name = "icon", length = 50)
    private String icon;

    /**
     * Color code for the category (e.g., "#FF5733").
     * Optional field to enhance UI.
     */
    @Column(name = "color_code", length = 10)
    private String colorCode;

    /**
     * Foreign Key linking the category to a user.
     * NULL means it's a system-defined category.
     */
    @ManyToOne
    @JoinColumn(name = "user_id", foreignKey = @ForeignKey(name = "fk_category_user"), nullable = true)
    private User user;

    /**
     * Soft delete flag to prevent accidental deletion.
     * Instead of removing a category, set this flag to TRUE.
     */
    @Column(name = "is_deleted", nullable = false)
    private boolean isDeleted = false;

    /**
     * Timestamp for when the category was created.
     * Automatically set when a new record is inserted.
     */
    @Column(name = "date_created", updatable = false)
    private LocalDateTime dateCreated = LocalDateTime.now();

    // Constructor
    public Category(){}
    public Category(Long categoryId, String name, CategoryType type, String icon, String colorCode, User user,
                    boolean isDeleted, LocalDateTime dateCreated) {
        this.categoryId = categoryId;
        this.name = name;
        this.type = type;
        this.icon = icon;
        this.colorCode = colorCode;
        this.user = user;
        this.isDeleted = isDeleted;
        this.dateCreated = dateCreated;
    }

    // Getter and Setter

    public Long getCategoryId() {
        return categoryId;
    }

    public void setCategoryId(Long categoryId) {
        this.categoryId = categoryId;
    }

    public @NotBlank(message = "Category name is required") String getName() {
        return name;
    }

    public void setName(@NotBlank(message = "Category name is required") String name) {
        this.name = name;
    }

    public CategoryType getType() {
        return type;
    }

    public void setType(CategoryType type) {
        this.type = type;
    }

    public String getIcon() {
        return icon;
    }

    public void setIcon(String icon) {
        this.icon = icon;
    }

    public String getColorCode() {
        return colorCode;
    }

    public void setColorCode(String colorCode) {
        this.colorCode = colorCode;
    }

    public User getUser() {
        return user;
    }

    public void setUser(User user) {
        this.user = user;
    }

    public boolean isDeleted() {
        return isDeleted;
    }

    public void setDeleted(boolean deleted) {
        isDeleted = deleted;
    }

    public LocalDateTime getDateCreated() {
        return dateCreated;
    }

    public void setDateCreated(LocalDateTime dateCreated) {
        this.dateCreated = dateCreated;
    }
}

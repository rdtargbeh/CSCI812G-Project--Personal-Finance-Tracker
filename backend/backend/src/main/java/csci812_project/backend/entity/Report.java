package csci812_project.backend.entity;

import csci812_project.backend.enums.ReportFileFormat;
import csci812_project.backend.enums.ReportGeneratedBy;
import jakarta.persistence.*;
import jakarta.validation.constraints.DecimalMin;
import jakarta.validation.constraints.NotNull;

import java.math.BigDecimal;
import java.time.LocalDate;

@Entity
@Table(name = "reports")
public class Report {

    /**
     * Unique report ID (Primary Key).
     * Auto-generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "report_id")
    private Long reportId;

    /**
     * Foreign Key linking the report to a user.
     * Ensures that each report is assigned to a specific user.
     */
    @ManyToOne
    @JoinColumn(name = "user_id", nullable = false, foreignKey = @ForeignKey(name = "fk_report_user"))
    private User user;

    /**
     * Start date of the report period.
     */
    @Column(name = "start_date", nullable = false)
    @NotNull(message = "Start date is required")
    private LocalDate startDate;

    /**
     * End date of the report period.
     */
    @Column(name = "end_date", nullable = false)
    @NotNull(message = "End date is required")
    private LocalDate endDate;

    /**
     * Total income during the report period.
     * Cannot be negative.
     */
    @Column(name = "total_income", nullable = false, precision = 15, scale = 2)
    @DecimalMin(value = "0.00", message = "Total income cannot be negative")
    private BigDecimal totalIncome;

    /**
     * Total expenses during the report period.
     * Cannot be negative.
     */
    @Column(name = "total_expense", nullable = false, precision = 15, scale = 2)
    @DecimalMin(value = "0.00", message = "Total expense cannot be negative")
    private BigDecimal totalExpense;

    /**
     * Net balance (total income - total expense).
     */
    @Column(name = "net_balance", nullable = false, precision = 15, scale = 2)
    private BigDecimal netBalance;

    /**
     * Indicates whether the report was generated automatically (SYSTEM) or manually (CUSTOM).
     * Defaults to SYSTEM.
     */
    @Column(name = "generated_by", nullable = false)
    @Enumerated(EnumType.STRING)
    private ReportGeneratedBy generatedBy = ReportGeneratedBy.SYSTEM;

    /**
     * Format of the report file (PDF, CSV, EXCEL).
     * Defaults to PDF.
     */
    @Column(name = "file_format", nullable = false)
    @Enumerated(EnumType.STRING)
    private ReportFileFormat fileFormat = ReportFileFormat.PDF;

    /**
     * Timestamp for when the report was created.
     * Automatically set when a new record is inserted.
     */
    @Column(name = "date_created", updatable = false)
    private LocalDate dateCreated = LocalDate.now();

    /**
     * Timestamp for when the report was last updated.
     * Automatically updates on modification.
     */
    @Column(name = "date_updated")
    private LocalDate dateUpdated = LocalDate.now();


    /**
     * ✅ Calculates net balance automatically.
     */
    public void calculateNetBalance() {
        this.netBalance = this.totalIncome.subtract(this.totalExpense);
        if (this.netBalance.compareTo(BigDecimal.ZERO) < 0) {
            this.netBalance = BigDecimal.ZERO; // ✅ Prevent negative balances
        }
    }


    @PrePersist
    @PreUpdate
    private void onPersistOrUpdate() {
        this.dateUpdated = LocalDate.now(); // ✅ Auto-update timestamp
        calculateNetBalance(); // ✅ Ensure balance is updated before saving
        validateDateRange(); // ✅ Ensure date range is valid
    }

    public void validateDateRange() {
        if (this.startDate.isAfter(this.endDate)) {
            throw new IllegalArgumentException("Start date cannot be after end date.");
        }
    }

//    @PrePersist
//    @PreUpdate
//    private void onPersistOrUpdate() {
//        this.dateUpdated = LocalDate.now(); // ✅ Update timestamp
//        this.netBalance = totalIncome.subtract(totalExpense); // ✅ Auto-calculate net balance
//    }



    // Constructor
    public Report(){}
    public Report(Long reportId, User user, LocalDate startDate, LocalDate endDate, BigDecimal totalIncome, BigDecimal totalExpense,
                  BigDecimal netBalance, ReportGeneratedBy generatedBy, ReportFileFormat fileFormat, LocalDate dateCreated, LocalDate dateUpdated) {
        this.reportId = reportId;
        this.user = user;
        this.startDate = startDate;
        this.endDate = endDate;
        this.totalIncome = totalIncome;
        this.totalExpense = totalExpense;
        this.netBalance = netBalance;
        this.generatedBy = generatedBy;
        this.fileFormat = fileFormat;
        this.dateCreated = dateCreated;
        this.dateUpdated = dateUpdated;
    }

    // Getter and Setter

    public Long getReportId() {
        return reportId;
    }

    public void setReportId(Long reportId) {
        this.reportId = reportId;
    }

    public User getUser() {
        return user;
    }

    public void setUser(User user) {
        this.user = user;
    }

    public @NotNull(message = "Start date is required") LocalDate getStartDate() {
        return startDate;
    }

    public void setStartDate(@NotNull(message = "Start date is required") LocalDate startDate) {
        this.startDate = startDate;
    }

    public @NotNull(message = "End date is required") LocalDate getEndDate() {
        return endDate;
    }

    public void setEndDate(@NotNull(message = "End date is required") LocalDate endDate) {
        this.endDate = endDate;
    }

    public @DecimalMin(value = "0.00", message = "Total income cannot be negative") BigDecimal getTotalIncome() {
        return totalIncome;
    }

    public void setTotalIncome(@DecimalMin(value = "0.00", message = "Total income cannot be negative") BigDecimal totalIncome) {
        this.totalIncome = totalIncome;
    }

    public @DecimalMin(value = "0.00", message = "Total expense cannot be negative") BigDecimal getTotalExpense() {
        return totalExpense;
    }

    public void setTotalExpense(@DecimalMin(value = "0.00", message = "Total expense cannot be negative") BigDecimal totalExpense) {
        this.totalExpense = totalExpense;
    }

    public BigDecimal getNetBalance() {
        return netBalance;
    }

    public void setNetBalance(BigDecimal netBalance) {
        this.netBalance = netBalance;
    }

    public ReportGeneratedBy getGeneratedBy() {
        return generatedBy;
    }

    public void setGeneratedBy(ReportGeneratedBy generatedBy) {
        this.generatedBy = generatedBy;
    }

    public ReportFileFormat getFileFormat() {
        return fileFormat;
    }

    public void setFileFormat(ReportFileFormat fileFormat) {
        this.fileFormat = fileFormat;
    }

    public LocalDate getDateCreated() {
        return dateCreated;
    }

    public void setDateCreated(LocalDate dateCreated) {
        this.dateCreated = dateCreated;
    }

    public LocalDate getDateUpdated() {
        return dateUpdated;
    }

    public void setDateUpdated(LocalDate dateUpdated) {
        this.dateUpdated = dateUpdated;
    }
}


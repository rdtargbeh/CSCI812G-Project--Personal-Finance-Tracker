package csci812_project.backend.entity;

import csci812_project.backend.enums.ReportFileFormat;
import csci812_project.backend.enums.ReportGeneratedBy;
import jakarta.persistence.*;
import jakarta.validation.constraints.DecimalMin;
import jakarta.validation.constraints.NotNull;
import lombok.*;

import java.math.BigDecimal;
import java.time.LocalDate;


@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor

@Entity
@Table(name = "reports")
@Builder
public class Report {

    /**
     * Unique report ID (Primary Key).
     * Auto-generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "report_id")
    private Long id;

    /**
     * Foreign Key linking the report to a user.
     * Ensures that each report is assigned to a specific user.
     */
    @ManyToOne
    @JoinColumn(name = "user_id", nullable = false, foreignKey = @ForeignKey(name = "fk_report_user"))
    private User user;

    /**
     * Start date of the report period.
     */
    @Column(name = "start_date", nullable = false)
    @NotNull(message = "Start date is required")
    private LocalDate startDate;

    /**
     * End date of the report period.
     */
    @Column(name = "end_date", nullable = false)
    @NotNull(message = "End date is required")
    private LocalDate endDate;

    /**
     * Total income during the report period.
     * Cannot be negative.
     */
    @Column(name = "total_income", nullable = false, precision = 15, scale = 2)
    @DecimalMin(value = "0.00", message = "Total income cannot be negative")
    private BigDecimal totalIncome;

    /**
     * Total expenses during the report period.
     * Cannot be negative.
     */
    @Column(name = "total_expense", nullable = false, precision = 15, scale = 2)
    @DecimalMin(value = "0.00", message = "Total expense cannot be negative")
    private BigDecimal totalExpense;

    /**
     * Net balance (total income - total expense).
     */
    @Column(name = "net_balance", nullable = false, precision = 15, scale = 2)
    private BigDecimal netBalance;

    /**
     * Indicates whether the report was generated automatically (SYSTEM) or manually (CUSTOM).
     * Defaults to SYSTEM.
     */
    @Column(name = "generated_by", nullable = false)
    @Enumerated(EnumType.STRING)
    private ReportGeneratedBy generatedBy = ReportGeneratedBy.SYSTEM;

    /**
     * Format of the report file (PDF, CSV, EXCEL).
     * Defaults to PDF.
     */
    @Column(name = "file_format", nullable = false)
    @Enumerated(EnumType.STRING)
    private ReportFileFormat fileFormat = ReportFileFormat.PDF;

    /**
     * Timestamp for when the report was created.
     * Automatically set when a new record is inserted.
     */
    @Column(name = "date_created", updatable = false)
    private LocalDate dateCreated = LocalDate.now();

    /**
     * Timestamp for when the report was last updated.
     * Automatically updates on modification.
     */
    @Column(name = "date_updated")
    private LocalDate dateUpdated = LocalDate.now();

    /**
     * Lifecycle hook to update the timestamp before updating.
     */
    @PreUpdate
    protected void onUpdate() {
        this.dateUpdated = LocalDate.now();
    }
}


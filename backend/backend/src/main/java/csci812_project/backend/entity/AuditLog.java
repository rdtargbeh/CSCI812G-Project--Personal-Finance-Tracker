package csci812_project.backend.entity;

import jakarta.persistence.*;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;

import java.time.LocalDateTime;

@Entity
@Table(name = "audit_logs")
public class AuditLog {

    /**
     * Unique log ID (Primary Key).
     * Auto-generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "log_id")
    private Long logId;

    /**
     * Foreign Key linking the log entry to a user.
     * Ensures that each log entry belongs to a specific user.
     */
    @ManyToOne
    @JoinColumn(name = "user_id", nullable = false, foreignKey = @ForeignKey(name = "fk_audit_log_user"))
    private User user;

    /**
     * The action performed (e.g., 'CREATE_TRANSACTION', 'DELETE_ACCOUNT').
     */
    @Column(name = "action", nullable = false, length = 255)
    @NotBlank(message = "Action description is required")
    private String action;

    /**
     * The name of the entity (table) that was affected.
     */
    @Column(name = "entity", nullable = false, length = 255)
    @NotBlank(message = "Entity name is required")
    private String entity;

    /**
     * The ID of the record that was affected.
     */
    @Column(name = "entity_id", nullable = false)
    @NotNull(message = "Entity ID is required")
    private Long entityId;

    /**
     * The previous state of the record before modification (stored as JSON).
     * Can be null if no previous value exists.
     */
    @Column(name = "old_value", columnDefinition = "TEXT")
    private String oldValue;

    /**
     * The new state of the record after modification (stored as JSON).
     * Can be null if the record was deleted.
     */
    @Column(name = "new_value", columnDefinition = "TEXT")
    private String newValue;

    /**
     * Timestamp for when the action was logged.
     * Automatically set when a new record is inserted.
     */
    @Column(name = "timestamp", nullable = false, updatable = false)
    private LocalDateTime timestamp = LocalDateTime.now();

    // Constructor
    public AuditLog(){}
    public AuditLog(Long logId, User user, String action, String entity, Long entityId, String oldValue,
                    String newValue, LocalDateTime timestamp) {
        this.logId = logId;
        this.user = user;
        this.action = action;
        this.entity = entity;
        this.entityId = entityId;
        this.oldValue = oldValue;
        this.newValue = newValue;
        this.timestamp = timestamp;
    }

    // Getter and Setter

    public Long getLogId() {
        return logId;
    }

    public void setLogId(Long logId) {
        this.logId = logId;
    }

    public User getUser() {
        return user;
    }

    public void setUser(User user) {
        this.user = user;
    }

    public @NotBlank(message = "Action description is required") String getAction() {
        return action;
    }

    public void setAction(@NotBlank(message = "Action description is required") String action) {
        this.action = action;
    }

    public @NotBlank(message = "Entity name is required") String getEntity() {
        return entity;
    }

    public void setEntity(@NotBlank(message = "Entity name is required") String entity) {
        this.entity = entity;
    }

    public @NotNull(message = "Entity ID is required") Long getEntityId() {
        return entityId;
    }

    public void setEntityId(@NotNull(message = "Entity ID is required") Long entityId) {
        this.entityId = entityId;
    }

    public String getOldValue() {
        return oldValue;
    }

    public void setOldValue(String oldValue) {
        this.oldValue = oldValue;
    }

    public String getNewValue() {
        return newValue;
    }

    public void setNewValue(String newValue) {
        this.newValue = newValue;
    }

    public LocalDateTime getTimestamp() {
        return timestamp;
    }

    public void setTimestamp(LocalDateTime timestamp) {
        this.timestamp = timestamp;
    }
}

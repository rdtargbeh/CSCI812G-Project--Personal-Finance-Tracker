package csci812_project.backend.entity;

import csci812_project.backend.enums.PaymentMethod;
import csci812_project.backend.enums.RecurringInterval;
import csci812_project.backend.enums.TransactionStatus;
import csci812_project.backend.enums.TransactionType;
import jakarta.persistence.*;
import jakarta.validation.constraints.*;

import java.math.BigDecimal;
import java.time.LocalDateTime;

@Entity
@Table(name = "transactions")
public class Transaction {

    /**
     * Unique transaction ID (Primary Key).
     * Auto-generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "transaction_id")
    private Long transactionId;

    /**
     * Foreign Key linking the transaction to a user.
     * Ensures that each transaction belongs to a specific user.
     */
    @ManyToOne
    @JoinColumn(name = "user_id", nullable = false, foreignKey = @ForeignKey(name = "fk_transaction_user"))
    private User user;

    /**
     * Foreign Key linking the transaction to an account.
     * Ensures that the transaction is recorded under a specific account.
     */
    @ManyToOne
    @JoinColumn(name = "account_id", nullable = false, foreignKey = @ForeignKey(name = "fk_transaction_account"))
    private Account account;

    /** Target account for transfers (nullable) */
    @ManyToOne
    @JoinColumn(name = "to_account_id", foreignKey = @ForeignKey(name = "fk_transaction_to_account"))
    private Account toAccount; // Added for transfers

    /**
     * Foreign Key linking the transaction to a category.
     * Allows transactions to be categorized for financial tracking.
     */
    @ManyToOne
    @JoinColumn(name = "category_id", foreignKey = @ForeignKey(name = "fk_transaction_category"))
    private Category category;

    /**
     * Amount of the transaction.
     * Cannot be negative.
     */
    @Column(name = "amount", nullable = false, precision = 15, scale = 2)
    @DecimalMin(value = "0.00", message = "Amount cannot be negative")
    private BigDecimal amount;

    /**
     * Type of transaction (INCOME, EXPENSE, or TRANSFER).
     */
    @Column(name = "transaction_type", nullable = false, length = 50)
    @Enumerated(EnumType.STRING)
    private TransactionType transactionType;

    /**
     * Date and time when the transaction was created.
     * Defaults to the current timestamp.
     */
    @Column(name = "date", nullable = false)
    private LocalDateTime date = LocalDateTime.now();

    /**
     * Optional description of the transaction.
     */
    @Column(name = "description", columnDefinition = "TEXT")
    private String description;

    /**
     * Payment method used for the transaction (CASH, CREDIT_CARD, BANK_TRANSFER, PAYPAL).
     */
    @Column(name = "payment_method", length = 30)
    @Enumerated(EnumType.STRING)
    private PaymentMethod paymentMethod;

    /**
     * URL to a receipt or proof of transaction.
     * Stored as a text URL.
     */
    @Column(name = "receipt_url", columnDefinition = "TEXT")
    private String receiptUrl;

    /**
     * Indicates whether this transaction is a recurring payment.
     */
    @Column(name = "recurring", nullable = false)
    private boolean isRecurring  = false;

    /** Recurring interval (DAILY, WEEKLY, MONTHLY, YEARLY) */
    @Enumerated(EnumType.STRING)
    @Column(name = "recurring_interval")
    private RecurringInterval recurringInterval;

    /** The next date the transaction should recur */
    @Column(name = "next_due_date")
    private LocalDateTime nextDueDate;

    /**
     * Parent transaction for split transactions.
     * Allows tracking of transactions that are part of a larger transaction.
     */
    @ManyToOne
    @JoinColumn(name = "parent_transaction_id", foreignKey = @ForeignKey(name = "fk_transaction_parent"))
    private Transaction parentTransaction;

    /**
     * Status of the transaction (PENDING, COMPLETED, FAILED).
     * Defaults to COMPLETED.
     */
    @Column(name = "status", nullable = false)
    @Enumerated(EnumType.STRING)
    private TransactionStatus status = TransactionStatus.COMPLETED;

    /**
     * Soft delete flag to prevent accidental deletion.
     * Instead of removing a transaction, set this flag to TRUE.
     */
    @Column(name = "is_deleted", nullable = false)
    private boolean isDeleted = false;

    /**
     * Timestamp for when the transaction was created.
     * Automatically set when a new record is inserted.
     */
    @Column(name = "date_created", updatable = false)
    private LocalDateTime dateCreated = LocalDateTime.now();

    /**
     * Timestamp for when the transaction was last updated.
     * Automatically updates on modification.
     */
    @Column(name = "date_updated")
    private LocalDateTime dateUpdated = LocalDateTime.now();

    /**
     * Lifecycle hook to update the timestamp before updating.
     */
    @PreUpdate
    protected void onUpdate() {
        this.dateUpdated = LocalDateTime.now();
    }


    // Constructor
    public Transaction(){}
    public Transaction(Long transactionId, User user, Account account, Account toAccount, Category category, BigDecimal amount,
                       TransactionType transactionType, LocalDateTime date, String description, PaymentMethod paymentMethod,
                       String receiptUrl, boolean isRecurring, RecurringInterval recurringInterval, LocalDateTime nextDueDate,
                       Transaction parentTransaction, TransactionStatus status, boolean isDeleted, LocalDateTime dateCreated,
                       LocalDateTime dateUpdated) {
        this.transactionId = transactionId;
        this.user = user;
        this.account = account;
        this.toAccount = toAccount;
        this.category = category;
        this.amount = amount;
        this.transactionType = transactionType;
        this.date = date;
        this.description = description;
        this.paymentMethod = paymentMethod;
        this.receiptUrl = receiptUrl;
        this.isRecurring = isRecurring;
        this.recurringInterval = recurringInterval;
        this.nextDueDate = nextDueDate;
        this.parentTransaction = parentTransaction;
        this.status = status;
        this.isDeleted = isDeleted;
        this.dateCreated = dateCreated;
        this.dateUpdated = dateUpdated;
    }

    // Getter and Setter

    public Long getTransactionId() {
        return transactionId;
    }

    public void setTransactionId(Long transactionId) {
        this.transactionId = transactionId;
    }

    public User getUser() {
        return user;
    }

    public void setUser(User user) {
        this.user = user;
    }

    public Account getAccount() {
        return account;
    }

    public void setAccount(Account account) {
        this.account = account;
    }

    public Account getToAccount() {
        return toAccount;
    }

    public void setToAccount(Account toAccount) {
        this.toAccount = toAccount;
    }

    public Category getCategory() {
        return category;
    }

    public void setCategory(Category category) {
        this.category = category;
    }

    public @DecimalMin(value = "0.00", message = "Amount cannot be negative") BigDecimal getAmount() {
        return amount;
    }

    public void setAmount(@DecimalMin(value = "0.00", message = "Amount cannot be negative") BigDecimal amount) {
        this.amount = amount;
    }

    public TransactionType getTransactionType() {
        return transactionType;
    }

    public void setTransactionType(TransactionType transactionType) {
        this.transactionType = transactionType;
    }

    public LocalDateTime getDate() {
        return date;
    }

    public void setDate(LocalDateTime date) {
        this.date = date;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public PaymentMethod getPaymentMethod() {
        return paymentMethod;
    }

    public void setPaymentMethod(PaymentMethod paymentMethod) {
        this.paymentMethod = paymentMethod;
    }

    public String getReceiptUrl() {
        return receiptUrl;
    }

    public void setReceiptUrl(String receiptUrl) {
        this.receiptUrl = receiptUrl;
    }

    public boolean isRecurring() {
        return isRecurring;
    }

    public void setRecurring(boolean recurring) {
        isRecurring = recurring;
    }

    public RecurringInterval getRecurringInterval() {
        return recurringInterval;
    }

    public void setRecurringInterval(RecurringInterval recurringInterval) {
        this.recurringInterval = recurringInterval;
    }

    public LocalDateTime getNextDueDate() {
        return nextDueDate;
    }

    public void setNextDueDate(LocalDateTime nextDueDate) {
        this.nextDueDate = nextDueDate;
    }

    public Transaction getParentTransaction() {
        return parentTransaction;
    }

    public void setParentTransaction(Transaction parentTransaction) {
        this.parentTransaction = parentTransaction;
    }

    public TransactionStatus getStatus() {
        return status;
    }

    public void setStatus(TransactionStatus status) {
        this.status = status;
    }

    public boolean isDeleted() {
        return isDeleted;
    }

    public void setDeleted(boolean deleted) {
        isDeleted = deleted;
    }

    public LocalDateTime getDateCreated() {
        return dateCreated;
    }

    public void setDateCreated(LocalDateTime dateCreated) {
        this.dateCreated = dateCreated;
    }

    public LocalDateTime getDateUpdated() {
        return dateUpdated;
    }

    public void setDateUpdated(LocalDateTime dateUpdated) {
        this.dateUpdated = dateUpdated;
    }

}

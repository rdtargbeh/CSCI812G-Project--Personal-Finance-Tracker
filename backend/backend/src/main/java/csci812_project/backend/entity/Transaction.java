package csci812_project.backend.entity;

import csci812_project.backend.enums.PaymentMethod;
import csci812_project.backend.enums.RecurringInterval;
import csci812_project.backend.enums.TransactionStatus;
import csci812_project.backend.enums.TransactionType;
import jakarta.persistence.*;
import jakarta.validation.constraints.*;
import lombok.*;

import java.math.BigDecimal;
import java.time.LocalDateTime;

@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor

@Entity
@Table(name = "transactions")
@Builder
public class Transaction {

    /**
     * Unique transaction ID (Primary Key).
     * Auto-generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "transaction_id")
    private Long transactionId;

    /**
     * Foreign Key linking the transaction to a user.
     * Ensures that each transaction belongs to a specific user.
     */
    @ManyToOne
    @JoinColumn(name = "user_id", nullable = false, foreignKey = @ForeignKey(name = "fk_transaction_user"))
    private User user;

    /**
     * Foreign Key linking the transaction to an account.
     * Ensures that the transaction is recorded under a specific account.
     */
    @ManyToOne
    @JoinColumn(name = "account_id", nullable = false, foreignKey = @ForeignKey(name = "fk_transaction_account"))
    private Account account;

    /** Target account for transfers (nullable) */
    @ManyToOne
    @JoinColumn(name = "to_account_id", foreignKey = @ForeignKey(name = "fk_transaction_to_account"))
    private Account toAccount; // Added for transfers

    /**
     * Foreign Key linking the transaction to a category.
     * Allows transactions to be categorized for financial tracking.
     */
    @ManyToOne
    @JoinColumn(name = "category_id", foreignKey = @ForeignKey(name = "fk_transaction_category"))
    private Category category;

    /**
     * Amount of the transaction.
     * Cannot be negative.
     */
    @Column(name = "amount", nullable = false, precision = 15, scale = 2)
    @DecimalMin(value = "0.00", message = "Amount cannot be negative")
    private BigDecimal amount;

    /**
     * Type of transaction (INCOME, EXPENSE, or TRANSFER).
     */
    @Column(name = "transaction_type", nullable = false)
    @Enumerated(EnumType.STRING)
    private TransactionType transactionType;

    /**
     * Date and time when the transaction was created.
     * Defaults to the current timestamp.
     */
    @Column(name = "date", nullable = false)
    private LocalDateTime date = LocalDateTime.now();

    /**
     * Optional description of the transaction.
     */
    @Column(name = "description", columnDefinition = "TEXT")
    private String description;

    /**
     * Payment method used for the transaction (CASH, CREDIT_CARD, BANK_TRANSFER, PAYPAL).
     */
    @Column(name = "payment_method")
    @Enumerated(EnumType.STRING)
    private PaymentMethod paymentMethod;

    /**
     * URL to a receipt or proof of transaction.
     * Stored as a text URL.
     */
    @Column(name = "receipt_url", columnDefinition = "TEXT")
    private String receiptUrl;

    /**
     * Indicates whether this transaction is a recurring payment.
     */
    @Column(name = "recurring", nullable = false)
    private boolean isRecurring  = false;

    /** Recurring interval (DAILY, WEEKLY, MONTHLY, YEARLY) */
    @Enumerated(EnumType.STRING)
    @Column(name = "recurring_interval")
    private RecurringInterval recurringInterval;

    /** The next date the transaction should recur */
    @Column(name = "next_due_date")
    private LocalDateTime nextDueDate;

    /**
     * Parent transaction for split transactions.
     * Allows tracking of transactions that are part of a larger transaction.
     */
    @ManyToOne
    @JoinColumn(name = "parent_transaction_id", foreignKey = @ForeignKey(name = "fk_transaction_parent"))
    private Transaction parentTransaction;

    /**
     * Status of the transaction (PENDING, COMPLETED, FAILED).
     * Defaults to COMPLETED.
     */
    @Column(name = "status", nullable = false)
    @Enumerated(EnumType.STRING)
    private TransactionStatus status = TransactionStatus.COMPLETED;

    /**
     * Soft delete flag to prevent accidental deletion.
     * Instead of removing a transaction, set this flag to TRUE.
     */
    @Column(name = "is_deleted", nullable = false)
    private boolean isDeleted = false;

    /**
     * Timestamp for when the transaction was created.
     * Automatically set when a new record is inserted.
     */
    @Column(name = "date_created", updatable = false)
    private LocalDateTime dateCreated = LocalDateTime.now();

    /**
     * Timestamp for when the transaction was last updated.
     * Automatically updates on modification.
     */
    @Column(name = "date_updated")
    private LocalDateTime dateUpdated = LocalDateTime.now();

    /**
     * Lifecycle hook to update the timestamp before updating.
     */
    @PreUpdate
    protected void onUpdate() {
        this.dateUpdated = LocalDateTime.now();
    }


}
